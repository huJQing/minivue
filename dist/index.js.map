{"version":3,"file":"index.js","sources":["../src/observe/array.js","../src/observe/dep.js","../src/observe/index.js","../src/state.js","../src/compiler/parse.js","../src/compiler/codegen.js","../src/compiler/index.js","../src/vdom/patch.js","../src/util/next-tick.js","../src/observe/scheduler.js","../src/observe/watcher.js","../src/vdom/index.js","../src/index.js","../src/init.js","../src/lifecycle.js","../src/render.js"],"sourcesContent":["// 保留数组原型\r\nconst arrayProto = Array.prototype\r\n\r\n// 然后将arrayMethods继承自数组原型\r\nexport const arrayMethods = Object.create(arrayProto)\r\nlet methodsToPatch = [\r\n    \"push\",\r\n    \"pop\",\r\n    \"shift\",\r\n    \"unshift\",\r\n    \"splice\",\r\n    \"reverse\",\r\n    \"sort\",\r\n];\r\n\r\nmethodsToPatch.forEach((method) => {\r\n    arrayMethods[method] = function (...args) {\r\n        // 保留原型方法的执行结果\r\n        const result = arrayProto[method].call(this, args)\r\n\r\n        /*\r\n        * this代表的就是数据本身 比如数据是{a:[1,2,3]} \r\n        * 那么我们使用a.push(4)  \r\n        * this就是a  \r\n        * ob就是a.__ob__ 这个属性就是上段代码增加的 \r\n        * 代表的是该数据已经被响应式观察过了指向Observer实例\r\n        **/\r\n        const ob = this.__ob__\r\n\r\n\r\n        // 这里的标志就是代表数组有新增操作，新增的可能是对象\r\n        let inserted;\r\n        switch (method) {\r\n            case \"push\":\r\n            case \"unshift\":\r\n                inserted = args;\r\n                break;\r\n            case \"splice\":\r\n                inserted = args.slice(2);\r\n            default:\r\n                break;\r\n        }\r\n        // 如果有新增的元素 inserted是一个数组 调用Observer实例的observeArray对数组每一项进行观测\r\n        if (inserted) ob.observeArray(inserted);\r\n        //数组派发更新 ob指的就是数组对应的Observer实例\r\n        ob.dep.notify();\r\n        // 之后咱们还可以在这里检测到数组改变了之后从而触发视图更新的操作\r\n        return result;\r\n    }\r\n})","let id = 0\r\nexport default class Dep {\r\n    constructor() {\r\n        this.id = id++\r\n        this.subs = []\r\n    }\r\n    depend() {\r\n        if (Dep.target) {\r\n            Dep.target.addDep(this)\r\n        }\r\n    }\r\n    notify() {\r\n        this.subs.forEach((watcher) => watcher.update())\r\n    }\r\n    addSub(watcher) {\r\n        this.subs.push(watcher)\r\n    }\r\n}\r\n\r\nDep.target = null\r\nconst targetStack = []\r\n\r\nexport function pushTarget(watcher) {\r\n    targetStack.push(watcher)\r\n    Dep.target = watcher\r\n}\r\n\r\nexport function popTarget() {\r\n    targetStack.pop()\r\n    Dep.target = targetStack[targetStack.length - 1]\r\n}","import {arrayMethods} from \"./array\";\r\nimport Dep from \"./dep\";\r\n\r\nclass Observe {\r\n    constructor(value) {\r\n        this.dep = new Dep()\r\n        // 给Observe实例加上__ob__以方便数组观测时新增了元素后调用observeArray添加响应式观测\r\n        Object.defineProperty(value, \"__ob__\", {\r\n            //  值指代的就是Observer的实例\r\n            value: this,\r\n            //  不可枚举\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n        });\r\n        if (Array.isArray(value)) {\r\n            value.__proto__ = arrayMethods\r\n            this.observeArray(value)\r\n        } else {\r\n            this.walk(value)\r\n        }\r\n    }\r\n\r\n    walk(data) {\r\n        Object.keys(data).forEach(key => {\r\n            let value = data[key]\r\n            defineReactive(data, key, value)\r\n        })\r\n    }\r\n\r\n\r\n    observeArray(items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            observe(items[i]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction defineReactive(data, key, value) {\r\n    let childOb = observe(value)\r\n    // 为每个属性实例化一个Dep\r\n    let dep = new Dep()\r\n    Object.defineProperty(data, key, {\r\n        get() {\r\n            // 页面取值的时候 可以把watcher收集到dep里面--依赖收集\r\n            if (Dep.target) {\r\n                // 如果有watcher dep就会保存watcher 同时watcher也会保存dep\r\n                dep.depend()\r\n                if (childOb) {\r\n                    // 属性的值依然是一个对象 包含数组和对象 里面的dep进行依赖收集\r\n                    childOb.dep.depend();\r\n                    if (Array.isArray(value)) {\r\n                        dependArray(value)\r\n                    }\r\n                }\r\n            }\r\n            return value\r\n        },\r\n        set(newValue) {\r\n            if (newValue === value) return\r\n            // 如果赋值的新值也是一个对象  需要观测\r\n            observe(newValue)\r\n            value = newValue\r\n            // 通知渲染watcher去更新--派发更新\r\n            dep.notify();\r\n        }\r\n    })\r\n}\r\n\r\nfunction dependArray(value) {\r\n    for (let e, i = 0, l = value.length; i < l; i++) {\r\n        e = value[i]\r\n        e && e.__ob__ && e.__ob__.dep.depend()\r\n        if (Array.isArray(e)) {\r\n            dependArray(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function observe(value) {\r\n    if (\r\n        Object.prototype.toString.call(value) === '[object Object]' ||\r\n        Array.isArray(value)\r\n    ) {\r\n        return new Observe(value)\r\n    }\r\n}","import { observe } from './observe/index.js'\r\n\r\nexport function initState(vm) {\r\n    const opts = vm.$options\r\n    if (opts.props) {\r\n        initProps(opts.props)\r\n    }\r\n    if (opts.methods) {\r\n        initMethod(vm)\r\n    }\r\n    if (opts.data) {\r\n        initData(vm)\r\n    }\r\n    if (opts.computed) {\r\n        initComputed(vm);\r\n    }\r\n    if (opts.watch) {\r\n        initWatch(vm);\r\n    }\r\n}\r\n\r\nfunction initData(vm) {\r\n    let data = vm.$options.data;\r\n\r\n    // data是function\r\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data || {}\r\n\r\n    for (let key in data) {\r\n        // 代理data上的属性到vm上，这样就可以通过this.a的方式直接访问了\r\n        proxy(vm, '_data', key)\r\n    }\r\n    observe(data)\r\n}\r\n\r\nfunction proxy(object, sourceKey, key) {\r\n    Object.defineProperty(object, key, {\r\n        get() {\r\n            return object[sourceKey][key]\r\n        },\r\n        set(val) {\r\n            object[sourceKey][key] = val\r\n        }\r\n    })\r\n}","const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; //匹配标签名 形如 abc-123\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; //匹配特殊标签 形如 abc:234 前面的abc:可有可无\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 匹配标签开始 形如 <abc-123 捕获里面的标签名\r\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束  >\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾 如 </abc-123> 捕获里面的标签名\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性  形如 id=\"app\"\r\n\r\nlet root, currentParent\r\n\r\nlet stack = []\r\n\r\nconst ELEMENT_TYPE = 1\r\nconst TEXT_TYPE = 3\r\n\r\nfunction createASTElement(tagName, attrs) {\r\n    return {\r\n        tag: tagName,\r\n        type: ELEMENT_TYPE,\r\n        children: [],\r\n        attrs,\r\n        parent: null\r\n    }\r\n}\r\n\r\n// 对开始标签处理\r\nfunction handleStartTag({ tagName, attrs }) {\r\n    let element = createASTElement(tagName, attrs)\r\n    if (!root) {\r\n        root = element\r\n    }\r\n    currentParent = element\r\n    stack.push(element)\r\n}\r\n\r\n// 对结束标签进行处理\r\nfunction handleEndTag() {\r\n    // 比如 <div><span></span></div> 当遇到第一个结束标签</span>时 会匹配到栈顶<span>元素对应的ast 并取出来\r\n    let element = stack.pop()\r\n    // 当前父元素就是栈顶的上一个元素 在这里就类似div\r\n    currentParent = stack[stack.length - 1]\r\n    if (currentParent) {\r\n        element.parent = currentParent\r\n        currentParent.children.push(element)\r\n    }\r\n}\r\n\r\n// 对文本进行处理\r\nfunction handleChars(text) {\r\n    // 去掉空格\r\n    text = text.replace(/\\s/g, \"\");\r\n    if (text) {\r\n        currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n        });\r\n    }\r\n}\r\n\r\nexport function parse(html) {\r\n    while (html) {\r\n        let textEnd = html.indexOf('<')\r\n        // 如果<在第一个，那么肯定是一个标签\r\n        if (textEnd === 0) {\r\n            // 匹配是否是开始标签\r\n            const startTagMatch = parseStartTag()\r\n            if (startTagMatch) {\r\n                handleStartTag(startTagMatch);\r\n                continue;\r\n            }\r\n\r\n            // 匹配是否是结束标签\r\n            const endTagMatch = html.match(endTag)\r\n            if (endTagMatch) {\r\n                advance(endTagMatch[0].length)\r\n                handleEndTag(endTagMatch[1])\r\n                continue;\r\n            }\r\n        }\r\n\r\n        let text\r\n        if (textEnd >= 0) {\r\n            text = html.substring(0, textEnd)\r\n        }\r\n        if (text) {\r\n            advance(text.length)\r\n            handleChars(text)\r\n        }\r\n    }\r\n\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen)\r\n\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: []\r\n            }\r\n\r\n            advance(start[0].length)\r\n\r\n            let end, attr;\r\n            while (\r\n                !(end = html.match(startTagClose)) &&\r\n                (attr = html.match(attribute))\r\n            ) {\r\n                advance(attr[0].length)\r\n                attr = {\r\n                    name: attr[1],\r\n                    value: attr[3] || attr[4] || attr[5], //这里是因为正则捕获支持双引号 单引号 和无引号的属性值\r\n                }\r\n                match.attrs.push(attr)\r\n            }\r\n\r\n            if (end) {\r\n                advance(1)\r\n                return match\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function advance(n) {\r\n        html = html.substring(n);\r\n    }\r\n\r\n    return root\r\n}\r\n\r\n","const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; //匹配花括号 {{  }} 捕获花括号里面的内容\r\n\r\nfunction gen(node) {\r\n    if (node.type === 1) {\r\n        return generate(node)\r\n    } else {\r\n        // 文本节点 \r\n        let text = node.text\r\n        // 不存在花括号变量表达式\r\n        if (!defaultTagRE.test(text)) {\r\n            return `_v(${JSON.stringify(text)})`\r\n        }\r\n        let lastIndex = (defaultTagRE.lastIndex = 0);\r\n        let tokens = [];\r\n        let match, index;\r\n\r\n        while ((match = defaultTagRE.exec(text))) {\r\n            // index代表匹配到的位置\r\n            index = match.index;\r\n            if (index > lastIndex) {\r\n                //   匹配到的{{位置  在tokens里面放入普通文本\r\n                tokens.push(JSON.stringify(text.slice(lastIndex, index)));\r\n            }\r\n            //   放入捕获到的变量内容\r\n            tokens.push(`_s(${match[1].trim()})`);\r\n            //   匹配指针后移\r\n            lastIndex = index + match[0].length;\r\n        }\r\n        // 如果匹配完了花括号  text里面还有剩余的普通文本 那么继续push\r\n        if (lastIndex < text.length) {\r\n            tokens.push(JSON.stringify(text.slice(lastIndex)));\r\n        }\r\n        // _v表示创建文本\r\n        return `_v(${tokens.join(\"+\")})`;\r\n    }\r\n}\r\n\r\nfunction genProps(attrs) {\r\n    let str = \"\"\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i]\r\n        // 对attrs属性里面的style做特殊处理\r\n        if (attr.name === 'style') {\r\n            let obj = {};\r\n            attr.value.split(\";\").forEach((item) => {\r\n                let [key, value] = item.split(\":\");\r\n                obj[key] = value;\r\n            });\r\n            attr.value = obj;\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`;\r\n    }\r\n    return `{${str.slice(0, -1)}}`;\r\n}\r\n\r\nfunction getChildren(el) {\r\n    const children = el.children\r\n    if (children) {\r\n        return `${children.map((c) => gen(c)).join(',')}`\r\n    }\r\n}\r\n\r\nexport function generate(el) {\r\n    let children = getChildren(el)\r\n    let code = `_c('${el.tag}',${el.attrs.length ? `${genProps(el.attrs)}` : \"undefined\"\r\n        }${children ? `,${children}` : ''})`;\r\n    return code\r\n}","import { parse } from \"./parse\";\r\nimport { generate } from \"./codegen\";\r\nexport function compileToFunctions(template) {\r\n    // 我们需要把html字符串变成render函数\r\n    // 1.把html代码转成ast语法树  ast用来描述代码本身形成树结构 不仅可以描述html 也能描述css以及js语法\r\n    // 很多库都运用到了ast 比如 webpack babel eslint等等\r\n    let ast = parse(template);\r\n    // 2.优化静态节点\r\n    // 这个有兴趣的可以去看源码  不影响核心功能就不实现了\r\n    //   if (options.optimize !== false) {\r\n    //     optimize(ast, options);\r\n    //   }\r\n\r\n    // 3.通过ast 重新生成代码\r\n    // 我们最后生成的代码需要和render函数一样\r\n    // 类似_c('div',{id:\"app\"},_c('div',undefined,_v(\"hello\"+_s(name)),_c('span',undefined,_v(\"world\"))))\r\n    // _c代表创建元素 _v代表创建文本 _s代表文Json.stringify--把对象解析成文本\r\n    let code = generate(ast);\r\n    //   使用with语法改变作用域为this  之后调用render函数可以使用call改变this 方便code里面的变量取值\r\n    let renderFn = new Function(`with(this){return ${code}}`);\r\n    return renderFn;\r\n}","export function patch(oldVnode, vnode) {\r\n    const isRealElement = oldVnode.nodeType\r\n    if (isRealElement) {\r\n        const oldElm = oldVnode\r\n        const parentElm = oldElm.parentNode;\r\n        let el = createElm(vnode)\r\n        parentElm.insertBefore(el, oldElm.nextSibling)\r\n        parentElm.removeChild(oldVnode)\r\n        return el\r\n    }\r\n}\r\n\r\nfunction createElm(vnode) {\r\n    let { tag, data, key, children, text } = vnode\r\n    if (typeof tag === 'string') {\r\n        vnode.el = document.createElement(tag)\r\n        updateProperties(vnode);\r\n        children.forEach(child => {\r\n            return vnode.el.appendChild(createElm(child));\r\n        })\r\n    } else {\r\n        vnode.el = document.createTextNode(text);\r\n    }\r\n    return vnode.el\r\n}\r\n\r\nfunction updateProperties(vnode) {\r\n    let newProps = vnode.data || {}\r\n    let el = vnode.el\r\n    for (let key in newProps) {\r\n        if (key === 'style') {\r\n            for (let styleName in newProps.style) {\r\n                el.style[styleName] = newProps.style[styleName];\r\n            }\r\n        } else {\r\n            el.setAttribute(key, newProps[key]);\r\n        }\r\n    }\r\n}","let callbacks = []\r\nlet pending = false;\r\n\r\nfunction flushCallbacks() {\r\n    pending = false\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        callbacks[i]()\r\n    }\r\n    callbacks.length = 0\r\n}\r\n\r\n// 定义一个异步方法 分别判断Promise/MutationObserver/setImmediate/setTimeout是否存在，降级处理\r\nlet timerFunc\r\nif (typeof Promise !== \"undefined\") {\r\n    const p = Promise.resolve()\r\n    timerFunc = () => {\r\n        p.then(flushCallbacks)\r\n    }\r\n} else if (typeof MutationObserver !== 'undefined') {\r\n    let counter = 1\r\n    const observer = new MutationObserver(flushCallbacks)\r\n    const textNode = document.createTextNode(String(counter))\r\n    observer.observe(textNode, {\r\n        characterData: true\r\n    })\r\n    timerFunc = () => {\r\n        counter = (counter + 1) % 2\r\n        textNode.data = String(counter)\r\n    }\r\n}else if(typeof setImmediate !== 'undefined'){\r\n    timerFunc = () =>{\r\n        setImmediate(flushCallbacks)\r\n    }\r\n}else{\r\n    timerFunc = () =>{\r\n        setTimeout(flushCallbacks)\r\n    }\r\n}\r\n\r\nexport function nextTick(cb){\r\n    callbacks.push(cb)\r\n    if(!pending){\r\n        // 如果多次调用nextTick  只会执行一次异步 等异步队列清空之后再把标志变为false\r\n        pending = true;\r\n        timerFunc()\r\n    }\r\n}","import {nextTick} from \"../util/next-tick\";\r\n\r\nlet queue = []\r\nlet has = {}\r\nfunction flushSchedulerQueue(){\r\n    for(let i = 0;i < queue.length;i++){\r\n        queue[i].run()\r\n    }\r\n    queue = []\r\n    has = {}\r\n}\r\n\r\nexport function queueWatcher(watcher){\r\n    const id = watcher.id\r\n    if(has[id] === undefined){\r\n        queue.push(watcher)\r\n        has[id] = true\r\n        nextTick(flushSchedulerQueue)\r\n    }\r\n}","import { pushTarget, popTarget } from \"./dep\"\r\nimport {queueWatcher} from './scheduler'\r\nlet id = 0\r\n\r\nexport default class Watcher {\r\n    constructor(vm, exprOrFn, cb, options) {\r\n        this.vm = vm\r\n        this.exprOrFn = exprOrFn\r\n        this.cb = cb\r\n        this.options = options\r\n        this.id = id++\r\n        this.deps = []\r\n        this.depsId = new Set()\r\n        if (typeof exprOrFn === 'function') {\r\n            this.getter = exprOrFn\r\n        }\r\n        this.get()\r\n    }\r\n    get() {\r\n        // 在调用方法之前先把当前watcher实例推到全局Dep.target上\r\n        pushTarget(this)\r\n        //如果watcher是渲染watcher 那么就相当于执行  vm._update(vm._render()) 这个方法在render函数执行的时候会取值 从而实现依赖收集\r\n        this.getter()\r\n        // 在调用方法之后把当前watcher实例从全局Dep.target移除\r\n        popTarget()\r\n    }\r\n    addDep(dep) {\r\n        let id = dep.id\r\n        if (!this.depsId.has(id)) {\r\n            this.depsId.add(id)\r\n            this.deps.push(dep)\r\n            dep.addSub(this)\r\n        }\r\n    }\r\n    update() {\r\n        // 每次watcher进行更新的时候  是否可以让他们先缓存起来  之后再一起调用\r\n        // 异步队列机制\r\n        queueWatcher(this);\r\n    }\r\n    run() {\r\n        // 真正的触发更新\r\n        this.get();\r\n    }\r\n}","export default class Vnode {\r\n    constructor(tag, data, key, children, text) {\r\n        this.tag = tag;\r\n        this.data = data;\r\n        this.key = key;\r\n        this.children = children;\r\n        this.text = text;\r\n    }\r\n}\r\n\r\nexport function createElement(tag, data = {}, ...children) {\r\n    let key = data.key\r\n    return new Vnode(tag, data, key, children)\r\n}\r\n\r\nexport function createTextNode(text) {\r\n    return new Vnode(undefined, undefined, undefined, undefined, text)\r\n}","import { initMixin } from './init'\r\nimport { lifecycleMixin } from './lifecycle.js';\r\nimport { renderMixin } from './render';\r\n\r\nfunction Vue(options) {\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue)\r\n\r\nrenderMixin(Vue)\r\n\r\nlifecycleMixin(Vue)\r\n\r\nexport default Vue;","import { initState } from \"./state\";\r\nimport { compileToFunctions } from \"./compiler\";\r\nimport { mountComponent } from \"./lifecycle\";\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {\r\n        const vm = this;\r\n        vm.$options = options;\r\n        // 初始化状态\r\n        initState(vm);\r\n\r\n        // 如果有el属性 进行模板渲染\r\n        if (vm.$options.el) {\r\n            vm.$mount(vm.$options.el);\r\n        }\r\n    }\r\n\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this\r\n        const options = vm.$options\r\n        el = document.querySelector(el)\r\n\r\n        if (!options.render) {\r\n            let template = options.template\r\n\r\n            if (!template && el) {\r\n                // 如果不存在render和template 但是存在el属性 直接将模板赋值到el所在的外层html结构（就是el本身 并不是父元素）\r\n                template = el.outerHTML;\r\n            }\r\n\r\n\r\n            // 最终需要把tempalte模板转化成render函数\r\n            if (template) {\r\n                const render = compileToFunctions(template);\r\n                options.render = render;\r\n            }\r\n        }\r\n\r\n        return mountComponent(vm, el)\r\n    }\r\n}","import { patch } from \"./vdom/patch\"\r\nimport Watcher from \"./observe/watcher\";\r\nexport function mountComponent(vm, el) {\r\n    vm.$el = el\r\n    // vm._update(vm._render());\r\n\r\n    let updateComponent = () => {\r\n        vm._update(vm._render());\r\n    }\r\n    new Watcher(vm, updateComponent, null, true)\r\n}\r\n\r\nexport function lifecycleMixin(Vue) {\r\n    Vue.prototype._update = function (vnode) {\r\n        console.log(\"_update\")\r\n        const vm = this;\r\n        vm.$el = patch(vm.$el, vnode)\r\n    }\r\n}","import { createElement, createTextNode } from \"./vdom\";\r\n\r\nexport function renderMixin(Vue) {\r\n    Vue.prototype._render = function () {\r\n        const vm = this;\r\n        const { render } = vm.$options\r\n        const vnode = render.call(vm)\r\n        return vnode\r\n    }\r\n\r\n    Vue.prototype._c = function (...args) {\r\n        return createElement(...args)\r\n    }\r\n\r\n    Vue.prototype._v = function (text) {\r\n        return createTextNode(text)\r\n    }\r\n\r\n    Vue.prototype._s = function (val) {\r\n        return val === null\r\n            ? \"\"\r\n            : typeof val === 'object'\r\n                ? JSON.stringify(val)\r\n                : val\r\n    }\r\n}"],"names":["arrayProto","Array","prototype","arrayMethods","Object","create","forEach","method","args","result","call","this","ob","__ob__","inserted","slice","observeArray","dep","notify","id","Dep","constructor","subs","depend","target","addDep","watcher","update","addSub","push","targetStack","Observe","value","defineProperty","enumerable","writable","configurable","isArray","__proto__","walk","data","keys","key","childOb","observe","get","dependArray","set","newValue","defineReactive","items","i","length","e","l","toString","initState","vm","opts","$options","props","initProps","methods","initMethod","_data","proxy","initData","computed","initComputed","watch","initWatch","object","sourceKey","val","ncname","qnameCapture","startTagOpen","RegExp","startTagClose","endTag","attribute","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","handleStartTag","tagName","attrs","element","tag","type","children","parent","createASTElement","handleEndTag","pop","handleChars","text","replace","defaultTagRE","getChildren","el","map","c","node","generate","test","JSON","stringify","match","index","lastIndex","tokens","exec","trim","join","gen","str","attr","name","obj","split","item","genProps","compileToFunctions","template","code","html","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","advance","substring","start","end","n","parse","Function","patch","oldVnode","vnode","nodeType","oldElm","parentElm","parentNode","createElm","insertBefore","nextSibling","removeChild","document","createElement","newProps","styleName","style","setAttribute","updateProperties","child","appendChild","createTextNode","timerFunc","callbacks","pending","flushCallbacks","Promise","p","resolve","then","MutationObserver","counter","observer","textNode","String","characterData","setImmediate","setTimeout","queue","has","flushSchedulerQueue","run","queueWatcher","cb","undefined","Watcher","exprOrFn","options","deps","depsId","Set","getter","add","Vnode","Vue","_init","$mount","querySelector","render","outerHTML","$el","updateComponent","_update","_render","mountComponent","initMixin","_c","_v","_s","renderMixin","console","log","lifecycleMixin"],"mappings":"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"}