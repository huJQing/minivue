{"version":3,"file":"index.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/compiler/parse.js","../src/compiler/codegen.js","../src/compiler/index.js","../src/vnode/index.js","../src/index.js","../src/init.js","../src/lifecycle.js","../src/render.js"],"sourcesContent":["// 保留数组原型\nconst arrayProto = Array.prototype\n\n// 然后将arrayMethods继承自数组原型\nexport const arrayMethods = Object.create(arrayProto)\nlet methodsToPatch = [\n    \"push\",\n    \"pop\",\n    \"shift\",\n    \"unshift\",\n    \"splice\",\n    \"reverse\",\n    \"sort\",\n];\n\nmethodsToPatch.forEach((method) => {\n    arrayMethods[method] = function (...args) {\n        // 保留原型方法的执行结果\n        const result = arrayProto[method].call(this, args)\n\n        /*\n        * this代表的就是数据本身 比如数据是{a:[1,2,3]} \n        * 那么我们使用a.push(4)  \n        * this就是a  \n        * ob就是a.__ob__ 这个属性就是上段代码增加的 \n        * 代表的是该数据已经被响应式观察过了指向Observer实例\n        **/\n        const ob = this.__ob__\n\n\n        // 这里的标志就是代表数组有新增操作，新增的可能是对象\n        let inserted;\n        switch (method) {\n            case \"push\":\n            case \"unshift\":\n                inserted = args;\n                break;\n            case \"splice\":\n                inserted = args.slice(2);\n            default:\n                break;\n        }\n        // 如果有新增的元素 inserted是一个数组 调用Observer实例的observeArray对数组每一项进行观测\n        if (inserted) ob.observeArray(inserted);\n        // 之后咱们还可以在这里检测到数组改变了之后从而触发视图更新的操作\n        return result;\n    }\n})","import { arrayMethods } from \"./array\";\nclass Observe {\n    constructor(value) {\n        // 给Observe实例加上__ob__以方便数组观测时新增了元素后调用observeArray添加响应式观测\n        Object.defineProperty(value, \"__ob__\", {\n            //  值指代的就是Observer的实例\n            value: this,\n            //  不可枚举\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        });\n        if (Array.isArray(value)) {\n            value.__proto__ = arrayMethods\n            this.observeArray(value)\n        } else {\n            this.walk(value)\n        }\n    }\n\n    walk(data) {\n        Object.keys(data).forEach(key => {\n            let value = data[key]\n            defineReactive(data, key, value)\n        })\n    }\n\n\n    observeArray(items) {\n        for (let i = 0; i < items.length; i++) {\n            observe(items[i]);\n        }\n    }\n}\n\nfunction defineReactive(data, key, value) {\n    observe(value)\n    Object.defineProperties(data, key, {\n        set(newValue) {\n            if (newValue === value) return\n            value = newValue\n        },\n        get() {\n            return value\n        }\n    })\n}\n\nexport function observe(value) {\n    if (\n        Object.prototype.toString.call(value) === 'object Object' ||\n        Array.isArray(value)\n    ) {\n        return new Observe(value)\n    }\n}","import { observe } from './observe/index.js'\n\nexport function initState(vm) {\n    const opts = vm.$options\n    if (opts.props) {\n        initProps(opts.props)\n    }\n    if (opts.methods) {\n        initMethod(vm)\n    }\n    if (opts.data) {\n        initData(vm)\n    }\n    if (opts.computed) {\n        initComputed(vm);\n    }\n    if (opts.watch) {\n        initWatch(vm);\n    }\n}\n\nfunction initData(vm) {\n    let data = vm.$options.data\n\n    // data是function\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data || {}\n\n    for (let key in data) {\n        // 代理data上的属性到vm上，这样就可以通过this.a的方式直接访问了\n        proxy(vm, '_data', key)\n    }\n    observe(data)\n}\n\nfunction proxy(object, sourceKey, key) {\n    Object.defineProperty(object, key, {\n        get() {\n            return object[sourceKey][key]\n        },\n        set(val) {\n            object[sourceKey][key] = val\n        }\n    })\n}","const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; //匹配标签名 形如 abc-123\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; //匹配特殊标签 形如 abc:234 前面的abc:可有可无\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 匹配标签开始 形如 <abc-123 捕获里面的标签名\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束  >\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾 如 </abc-123> 捕获里面的标签名\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性  形如 id=\"app\"\n\nlet root, currentParent\n\nlet stack = []\n\nconst ELEMENT_TYPE = 1\nconst TEXT_TYPE = 3\n\nfunction createASTElement(tagName, attrs) {\n    return {\n        tag: tagName,\n        type: ELEMENT_TYPE,\n        children: [],\n        attrs,\n        parent: null\n    }\n}\n\n// 对开始标签处理\nfunction handleStartTag({ tagName, attrs }) {\n    let element = createASTElement(tagName, attrs)\n    if (!root) {\n        root = element\n    }\n    currentParent = element\n    stack.push(element)\n}\n\n// 对结束标签进行处理\nfunction handleEndTag() {\n    // 比如 <div><span></span></div> 当遇到第一个结束标签</span>时 会匹配到栈顶<span>元素对应的ast 并取出来\n    let element = stack.pop()\n    // 当前父元素就是栈顶的上一个元素 在这里就类似div\n    currentParent = stack[stack.length - 1]\n    if (currentParent) {\n        element.parent = currentParent\n        currentParent.children.push(element)\n    }\n}\n\n// 对文本进行处理\nfunction handleChars(text) {\n    // 去掉空格\n    text = text.replace(/\\s/g, \"\");\n    if (text) {\n        currentParent.children.push({\n            type: TEXT_TYPE,\n            text,\n        });\n    }\n}\n\nexport function parse(html) {\n    while (html) {\n        let textEnd = html.indexOf('<')\n        // 如果<在第一个，那么肯定是一个标签\n        if (textEnd === 0) {\n            // 匹配是否是开始标签\n            const startTagMatch = parseStartTag()\n            if (startTagMatch) {\n                handleStartTag(startTagMatch);\n                continue;\n            }\n\n            // 匹配是否是结束标签\n            const endTagMatch = html.match(endTag)\n            if (endTagMatch) {\n                advance(endTagMatch[0].length)\n                handleEndTag(endTagMatch[1])\n                continue;\n            }\n        }\n\n        let text\n        if (textEnd >= 0) {\n            text = html.substring(0, textEnd)\n        }\n        if (text) {\n            advance(text.length)\n            handleChars(text)\n        }\n    }\n\n    function parseStartTag() {\n        const start = html.match(startTagOpen)\n\n        if (start) {\n            const match = {\n                tagName: start[1],\n                attrs: []\n            }\n\n            advance(start[0].length)\n\n            let end, attr;\n            while (\n                !(end = html.match(startTagClose)) &&\n                (attr = html.match(attribute))\n            ) {\n                advance(attr[0].length)\n                attr = {\n                    name: attr[1],\n                    value: attr[3] || attr[4] || attr[5], //这里是因为正则捕获支持双引号 单引号 和无引号的属性值\n                }\n                match.attrs.push(attr)\n            }\n\n            if (end) {\n                advance(1)\n                return match\n            }\n        }\n    }\n\n\n    function advance(n) {\n        html = html.substring(n);\n    }\n\n    return root\n}\n\n","const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; //匹配花括号 {{  }} 捕获花括号里面的内容\n\nfunction gen(node) {\n    if (node.type === 1) {\n        return generate(node)\n    } else {\n        // 文本节点 \n        let text = node.text\n        // 不存在花括号变量表达式\n        if (!defaultTagRE.test(text)) {\n            return `_v(${JSON.stringify(text)})`\n        }\n        let lastIndex = (defaultTagRE.lastIndex = 0);\n        let tokens = [];\n        let match, index;\n\n        while ((match = defaultTagRE.exec(text))) {\n            debugger\n            // index代表匹配到的位置\n            index = match.index;\n            if (index > lastIndex) {\n                //   匹配到的{{位置  在tokens里面放入普通文本\n                tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n            }\n            //   放入捕获到的变量内容\n            tokens.push(`_s(${match[1].trim()})`);\n            //   匹配指针后移\n            lastIndex = index + match[0].length;\n        }\n        // 如果匹配完了花括号  text里面还有剩余的普通文本 那么继续push\n        if (lastIndex < text.length) {\n            tokens.push(JSON.stringify(text.slice(lastIndex)));\n        }\n        // _v表示创建文本\n        return `_v(${tokens.join(\"+\")})`;\n    }\n}\n\nfunction genProps(attrs) {\n    let str = \"\"\n    for (let i = 0; i < attrs.length; i++) {\n        let attr = attrs[i]\n        // 对attrs属性里面的style做特殊处理\n        if (attr.name === 'style') {\n            let obj = {};\n            attr.value.split(\";\").forEach((item) => {\n                let [key, value] = item.split(\":\");\n                obj[key] = value;\n            });\n            attr.value = obj;\n        }\n        str += `${attr.name}:${JSON.stringify(attr.value)},`;\n    }\n    return `{${str.slice(0, -1)}}`;\n}\n\nfunction getChildren(el) {\n    const children = el.children\n    if (children) {\n        return `${children.map((c) => gen(c)).join(',')}`\n    }\n}\n\nexport function generate(el) {\n    let children = getChildren(el)\n    let code = `_c('${el.tag}',${el.attrs.length ? `${genProps(el.attrs)}` : \"undefined\"\n        }${children ? `,${children}` : ''})`;\n    return code\n}","import { parse } from \"./parse\";\nimport { generate } from \"./codegen\";\nexport function compileToFunctions(template) {\n    // 我们需要把html字符串变成render函数\n    // 1.把html代码转成ast语法树  ast用来描述代码本身形成树结构 不仅可以描述html 也能描述css以及js语法\n    // 很多库都运用到了ast 比如 webpack babel eslint等等\n    let ast = parse(template);\n    // 2.优化静态节点\n    // 这个有兴趣的可以去看源码  不影响核心功能就不实现了\n    //   if (options.optimize !== false) {\n    //     optimize(ast, options);\n    //   }\n\n    // 3.通过ast 重新生成代码\n    // 我们最后生成的代码需要和render函数一样\n    // 类似_c('div',{id:\"app\"},_c('div',undefined,_v(\"hello\"+_s(name)),_c('span',undefined,_v(\"world\"))))\n    // _c代表创建元素 _v代表创建文本 _s代表文Json.stringify--把对象解析成文本\n    let code = generate(ast);\n    //   使用with语法改变作用域为this  之后调用render函数可以使用call改变this 方便code里面的变量取值\n    let renderFn = new Function(`with(this){return ${code}}`);\n    return renderFn;\n}","export default class Vnode {\n    constructor(tag, data, key, children, text) {\n        this.tag = tag;\n        this.data = data;\n        this.key = key;\n        this.children = children;\n        this.text = text;\n    }\n}\n\nexport function createElement(tag, data = {}, ...children) {\n    let key = data.key\n    return new Vnode(tag, data, key, children)\n}\n\nexport function createTextNode(text) {\n    return new Vnode(undefined, undefined, undefined, undefined, text)\n}","import { initMixin } from './init'\nimport { lifecycleMixin } from './lifecycle.js';\nimport { renderMixin } from './render';\n\nfunction Vue(options) {\n    this._init(options)\n}\n\ninitMixin(Vue)\n\nrenderMixin(Vue)\n\nlifecycleMixin(Vue)\n\nexport default Vue;","import { initState } from \"./state\";\nimport { compileToFunctions } from \"./compiler\";\nimport { mountComponent } from \"./lifecycle\";\nexport function initMixin(Vue) {\n    Vue.prototype._init = function (options) {\n        const vm = this;\n        vm.$options = options;\n        // 初始化状态\n        initState(vm);\n\n        // 如果有el属性 进行模板渲染\n        if (vm.$options.el) {\n            vm.$mount(vm.$options.el);\n        }\n    }\n\n    Vue.prototype.$mount = function (el) {\n        const vm = this\n        const options = vm.$options\n        el = document.querySelector(el)\n\n        if (!options.render) {\n            let template = options.template\n\n            if (!template && el) {\n                // 如果不存在render和template 但是存在el属性 直接将模板赋值到el所在的外层html结构（就是el本身 并不是父元素）\n                template = el.outerHTML;\n            }\n\n\n            // 最终需要把tempalte模板转化成render函数\n            if (template) {\n                const render = compileToFunctions(template);\n                options.render = render;\n            }\n        }\n\n        return mountComponent(vm, el)\n    }\n}","export function mountComponent(vm, el) {\n    vm.$el = el\n    vm._update(vm._render());\n}\n\nexport function lifecycleMixin(Vue) {\n    Vue.prototype._updata = function (vnode) {\n        const vm = this;\n        patch(vm.$el, vnode)\n    }\n}","import { createElement, createTextNode } from \"./vnode\";\n\nexport function renderMixin(Vue) {\n    Vue.prototype._render = function () {\n        const vm = this;\n        const { render } = vm.$options\n        const vnode = render.call(vm)\n        return vnode\n    }\n\n    Vue.prototype._c = function (...args) {\n        return createElement(...args)\n    }\n\n    Vue.prototype._v = function (text) {\n        return createTextNode(text)\n    }\n\n    Vue.prototype._s = function (val) {\n        return val === null\n            ? \"\"\n            : typeof val === 'object'\n                ? JSON.stringify(val)\n                : val\n    }\n}"],"names":["arrayProto","Array","prototype","arrayMethods","Object","create","forEach","method","args","result","call","this","ob","__ob__","inserted","slice","observeArray","Observe","constructor","value","defineProperty","enumerable","writable","configurable","isArray","__proto__","walk","data","keys","key","observe","defineProperties","set","newValue","get","defineReactive","items","i","length","toString","initState","vm","opts","$options","props","initProps","methods","initMethod","_data","proxy","initData","computed","initComputed","watch","initWatch","object","sourceKey","val","ncname","qnameCapture","startTagOpen","RegExp","startTagClose","endTag","attribute","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","handleStartTag","tagName","attrs","element","tag","type","children","parent","createASTElement","push","handleEndTag","pop","handleChars","text","replace","defaultTagRE","getChildren","el","map","c","node","generate","test","JSON","stringify","match","index","lastIndex","tokens","exec","trim","join","gen","str","attr","name","obj","split","item","genProps","compileToFunctions","template","code","html","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","advance","substring","start","end","n","parse","Function","Vnode","Vue","options","_init","$mount","document","querySelector","render","outerHTML","$el","_update","_render","mountComponent","initMixin","_c","createElement","_v","undefined","createTextNode","_s","renderMixin","_updata","vnode","patch","lifecycleMixin"],"mappings":"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"}